function r(r){return"0x"+r.map((r=>r.toString(16).padStart(2,"0"))).join("")}function e(r,e=0){let n=0,t=0,o=[];for(;;){if(e>=r.length)throw new RangeError("buffer overflow");let u=r[e++];if(t|=(127&u)<<n,n+=7,n>=8&&(o.push(255&t),t>>=8,n-=8),u<=127)break}return n&&o.push(t),[o.reverse(),e]}function n(n,t){return[n,t]=e(n,t),[r(n),t]}function t(n,t){return[n,t]=e(n,t),[BigInt(r(n)),t]}function o(n,t){[n,t]=e(n,t);let o=parseInt(r(n));if(!Number.isSafeInteger(o))throw new RangeError("unsafe");return[o,t]}function u(r,e,n=0){if("number"==typeof e&&!Number.isSafeInteger(e))throw new RangeError("unsafe");if((e=BigInt(e))<0)throw new RangeError("negative");const t=127n;for(;e>t;)r[n++]=128|Number(e&t),e>>=7n;return r[n++]=Number(e),n}export{o as read,t as readBigInt,e as readBytes,n as readHex,u as write};
